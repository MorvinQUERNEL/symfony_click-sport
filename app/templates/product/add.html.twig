{% extends 'base.html.twig' %}

{% block title %}Ajouter un produit - Click & Sport{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/product-form.css') }}">
{% endblock %}

{% block body %}
    <div class="product-form-container">
        <div class="form-header">
            <h1>Ajouter un nouveau produit</h1>
            <p>Remplissez les informations ci-dessous pour ajouter un produit √† votre catalogue</p>
        </div>

        {# Affichage des messages flash #}
        {% for message in app.flashes('success') %}
            <div class="alert alert-success" style="background: #d4edda; color: #155724; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid #c3e6cb;">
                {{ message }}
            </div>
        {% endfor %}

        {% for message in app.flashes('error') %}
            <div class="alert alert-error" style="background: #f8d7da; color: #721c24; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border: 1px solid #f5c6cb;">
                {{ message }}
            </div>
        {% endfor %}

        {{ form_start(form, {'attr': {'class': 'product-form'}}) }}
        
        <div class="form-section">
            <h3>Informations g√©n√©rales</h3>
            
            <div class="form-row">
                <div class="form-group">
                    {{ form_label(form.title, 'Titre du produit', {'label_attr': {'class': 'form-label required-field'}}) }}
                    {{ form_widget(form.title, {'attr': {'class': 'form-input'}}) }}
                    {{ form_errors(form.title, {'attr': {'class': 'error-message'}}) }}
                </div>
                
                <div class="form-group">
                    {{ form_label(form.price, 'Prix', {'label_attr': {'class': 'form-label required-field'}}) }}
                    {{ form_widget(form.price, {'attr': {'class': 'form-input'}}) }}
                    {{ form_errors(form.price, {'attr': {'class': 'error-message'}}) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.categories, 'Cat√©gorie', {'label_attr': {'class': 'form-label required-field'}}) }}
                {{ form_widget(form.categories, {'attr': {'class': 'form-input'}}) }}
                {{ form_errors(form.categories, {'attr': {'class': 'error-message'}}) }}
            </div>
        </div>

        <div class="form-section">
            <h3>Description et d√©tails</h3>
            
            <div class="form-group">
                {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.description, {'attr': {'class': 'form-input'}}) }}
                {{ form_errors(form.description, {'attr': {'class': 'error-message'}}) }}
            </div>

            <div class="form-group">
                {{ form_label(form.notice, 'Notice / Instructions', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.notice, {'attr': {'class': 'form-input'}}) }}
                {{ form_errors(form.notice, {'attr': {'class': 'error-message'}}) }}
            </div>
        </div>

        <div class="form-section">
            <h3>Images du produit</h3>
            
            <div class="form-group">
                <div class="file-input-container" id="fileInputContainer">
                    {{ form_widget(form.images, {'attr': {'class': 'file-input', 'id': 'fileInput'}}) }}
                    <div class="file-input-label">
                        <div class="upload-icon">üì∑</div>
                        <div class="upload-text">Cliquez ou glissez vos images ici</div>
                        <div class="upload-hint">Formats accept√©s : JPG, PNG, WebP, GIF (max 5MB par image)</div>
                    </div>
                </div>
                {{ form_errors(form.images, {'attr': {'class': 'error-message'}}) }}
                
                <div class="selected-files" id="selectedFiles"></div>
                <div class="file-counter" id="fileCounter" style="margin-top: 1rem; text-align: center; color: #7f8c8d; font-size: 0.9rem;"></div>
            </div>
        </div>

        <div class="form-actions">
            <a href="{{ path('app_home') }}" class="btn btn-secondary">
                <span>‚Üê</span> Annuler
            </a>
            <button type="submit" class="btn btn-primary">
                <span>‚úì</span> Ajouter le produit
            </button>
        </div>

        {{ form_end(form) }}
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('fileInput');
            const fileInputContainer = document.getElementById('fileInputContainer');
            const selectedFiles = document.getElementById('selectedFiles');
            const fileCounter = document.getElementById('fileCounter');
            const maxFiles = 5;
            let selectedFilesArray = [];

            // Gestion du drag & drop
            fileInputContainer.addEventListener('dragover', function(e) {
                e.preventDefault();
                fileInputContainer.classList.add('dragover');
            });

            fileInputContainer.addEventListener('dragleave', function(e) {
                e.preventDefault();
                fileInputContainer.classList.remove('dragover');
            });

            fileInputContainer.addEventListener('drop', function(e) {
                e.preventDefault();
                fileInputContainer.classList.remove('dragover');
                const files = Array.from(e.dataTransfer.files);
                handleFiles(files);
            });

            // Gestion de la s√©lection de fichiers
            fileInput.addEventListener('change', function(e) {
                const files = Array.from(e.target.files);
                handleFiles(files);
            });

            function handleFiles(files) {
                const remainingSlots = maxFiles - selectedFilesArray.length;
                const filesToAdd = files.slice(0, remainingSlots);

                filesToAdd.forEach(file => {
                    if (file.type.startsWith('image/')) {
                        // V√©rifier la taille du fichier (5MB max)
                        if (file.size > 5 * 1024 * 1024) {
                            showError(`Le fichier "${file.name}" est trop volumineux (max 5MB)`);
                            return;
                        }

                        // V√©rifier si le fichier n'est pas d√©j√† s√©lectionn√©
                        const isDuplicate = selectedFilesArray.some(existingFile => 
                            existingFile.name === file.name && existingFile.size === file.size
                        );

                        if (!isDuplicate) {
                            selectedFilesArray.push(file);
                            createFilePreview(file);
                            updateFileCounter();
                        } else {
                            showError(`Le fichier "${file.name}" est d√©j√† s√©lectionn√©`);
                        }
                    } else {
                        showError(`Le fichier "${file.name}" n'est pas une image valide`);
                    }
                });

                // Mettre √† jour l'input file avec les fichiers s√©lectionn√©s
                updateFileInput();
            }

            function createFilePreview(file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.createElement('div');
                    preview.className = 'file-preview';
                    preview.dataset.filename = file.name;
                    
                    preview.innerHTML = `
                        <img src="${e.target.result}" alt="${file.name}">
                        <div class="file-info">
                            <span class="file-name">${file.name}</span>
                            <span class="file-size">${formatFileSize(file.size)}</span>
                        </div>
                        <button type="button" class="remove-file" onclick="removeFile('${file.name}')" title="Supprimer cette image">√ó</button>
                    `;
                    selectedFiles.appendChild(preview);
                };
                reader.readAsDataURL(file);
            }

            function removeFile(filename) {
                // Supprimer le fichier du tableau
                selectedFilesArray = selectedFilesArray.filter(file => file.name !== filename);
                
                // Supprimer la pr√©visualisation
                const preview = selectedFiles.querySelector(`[data-filename="${filename}"]`);
                if (preview) {
                    preview.remove();
                }
                
                updateFileCounter();
                updateFileInput();
            }

            function updateFileCounter() {
                const count = selectedFilesArray.length;
                if (count === 0) {
                    fileCounter.textContent = 'Aucune image s√©lectionn√©e';
                } else if (count === 1) {
                    fileCounter.textContent = '1 image s√©lectionn√©e';
                } else {
                    fileCounter.textContent = `${count} images s√©lectionn√©es`;
                }

                // Changer la couleur selon le nombre de fichiers
                if (count >= maxFiles) {
                    fileCounter.style.color = '#e74c3c';
                    fileInputContainer.style.borderColor = '#e74c3c';
                } else {
                    fileCounter.style.color = '#7f8c8d';
                    fileInputContainer.style.borderColor = '#bdc3c7';
                }
            }

            function updateFileInput() {
                // Cr√©er un nouveau FileList avec les fichiers s√©lectionn√©s
                const dt = new DataTransfer();
                selectedFilesArray.forEach(file => dt.items.add(file));
                fileInput.files = dt.files;
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            function showError(message) {
                // Cr√©er un message d'erreur temporaire
                const errorDiv = document.createElement('div');
                errorDiv.style.cssText = `
                    background: #f8d7da;
                    color: #721c24;
                    padding: 0.5rem 1rem;
                    border-radius: 4px;
                    margin: 0.5rem 0;
                    border: 1px solid #f5c6cb;
                    font-size: 0.9rem;
                `;
                errorDiv.textContent = message;
                
                selectedFiles.parentNode.insertBefore(errorDiv, selectedFiles);
                
                // Supprimer le message apr√®s 3 secondes
                setTimeout(() => {
                    errorDiv.remove();
                }, 3000);
            }

            // Validation en temps r√©el
            const inputs = document.querySelectorAll('.form-input');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    validateField(this);
                });
            });

            function validateField(field) {
                const value = field.value.trim();
                field.classList.remove('error', 'success');

                if (field.hasAttribute('required') && !value) {
                    field.classList.add('error');
                } else if (value) {
                    field.classList.add('success');
                }
            }

            // Initialiser le compteur
            updateFileCounter();

            // Rendre la fonction removeFile globale pour qu'elle soit accessible depuis le HTML
            window.removeFile = removeFile;
        });
    </script>
{% endblock %} 